#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\begin_preamble
\usepackage{listings,xcolor,courier,bookmark}
\usepackage{listingsutf8}
\definecolor{darkblue}{named}{blue}
\definecolor{darkred}{named}{red}
\definecolor{grau}{named}{gray}
\let\Righttorque\relax
\lstset{
captionpos=b,
commentstyle=\color[rgb]{0.133,0.545,0.133},
keywordstyle=\color{darkblue},
stringstyle=\color{darkred},
extendedchars=true,
basicstyle=\small\ttfamily,
showstringspaces=false,
tabsize=2,
numbers=left,
numberstyle=\tiny,
breakautoindent  = true,
breakindent      = 2em,
breaklines       = true,
postbreak        = ,
prebreak         = \raisebox{-.8ex}[0ex][0ex]{\Righttorque},
showspaces=false, 
showtabs=false, 
showstringspaces=false,
language=VHDL,
frame=single,
morecomment=[s]{--}
}


\renewcommand*{\lstlistingname}{Codice}


\usepackage{fancyhdr}
\pagestyle{fancy}

\fancyhead{} 
\fancyfoot{} 

\fancyhead[RO,LE]{\bfseries \leftmark}
\fancyfoot[LE,RO]{\thepage}
\fancyfoot[LO,CE]{Tesina in ASE: Architetture dei Sistemi di Elaborazione}
\renewcommand{\headrulewidth}{0.4pt}
\renewcommand{\footrulewidth}{0.4pt}

\date{}
\cfoot{}
\end_preamble
\use_default_options true
\master Tesina.lyx
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2.5cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Soluzione
\end_layout

\begin_layout Standard
Si riportano nella tabella le caratteristiche hardware e software del calcolator
e utilizzato per effettuare il benchmarking:
\end_layout

\begin_layout Standard
\align center
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Marca e modello
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Lenovo YOGA 55-14IBD
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CPU
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Intel Intel Core i3-5005U 2 GHz 2 core fisici
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
RAM
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4 GB GDDR3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
Memoria secondaria
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
500 GB HDD
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
S
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
istema operativo
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ubuntu 18.04
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Il primo passo è stato quello di effettuare un'analisi preliminare, con
 7 osservazioni per ogni possibile combinazione dei fattori FileSize e BlockSize
, per ottenere una prima stima dei tempi di read e write.
 Tali tempi sono stati utilizzati per calcolare la dimensione di ogni campione,
 e quindi il numero minimo di osservazioni necessarie affinchè potesse essere
 garantito un determinato grado di accuratezza ed una determinata confidenza;
 la formula per ricavare tale numero minimo è la seguente.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
n=\left(\frac{100\cdot z\cdot s}{r\cdot\bar{x}}\right)^{2}
\]

\end_inset


\end_layout

\begin_layout Standard
I parametri per ogni campione da considerare sono:
\end_layout

\begin_layout Itemize
z, livello di confidenza;
\end_layout

\begin_layout Itemize
s, deviazione standard;
\end_layout

\begin_layout Itemize
\begin_inset Formula $\bar{x}$
\end_inset

, media campionaria;
\end_layout

\begin_layout Itemize
r, percentuale di accuratezza.
\end_layout

\begin_layout Standard
L'analisi effettuata prevede, dopo aver calcolato per ogni combinazione
 media e deviazione standard, una scelta approriata di accuratezza e confidenza
 in maniera tale da trovare un compromesso tra numero di esperimenti e complessi
tà computazionale per condurli.
 A tal fine, è stata realizzata una funzione MATLAB che implementa la formula
 mostrata prendendo in ingresso media, deviazione standard e z-quantile.
 Per quanto riguarda il valore di accuratezza, bisogna fare alcune considerazion
i: ogni campione è caratterizzato da una media e una deviazione standard;
 la scelta di r non può essere vincolata semplicemente alla media, ma deve
 tenere in considerazione anche come i valori si distribuiscono attorno
 ad essa.
 Se così non fosse, il numero di osservazioni per alcuni campioni risulterebbe
 eccessivo da calcolare, mentre per altri sarebbe molto basso.
 
\end_layout

\begin_layout Standard
*FIGURE*
\end_layout

\begin_layout Standard
Sulla base di tali considerazioni, per il calcolo di r è stato quindi tenuto
 conto per ogni campione non il valore della media, bensì il coefficiente
 di variazione (COV), scegliendo il valore di r proprio pari a 1/4 di quest'ulti
mo.
 Considerando come confidenza il 99%, si è ottenuto come risultato un numero
 di esperimenti per ogni campione pari a 49, che si è stimato possibili
 eseguire in un tempo complessivo di circa 4 ore.
 
\end_layout

\begin_layout Standard
*SCRIPT*
\end_layout

\begin_layout Standard
Com'è possibile notare dai risultati dello script, la peggiore accuracy
 che si ottiene per le scritture è del 20%, mentre per le letture è di circa
 il 6%.
 Tali valori sono isolati a pochi campioni, il che ci permette di affermare
 che in generale le scelte effettuate siano comunque accurate.
\end_layout

\begin_layout Standard
Dopo aver estratto 9 campioni da 49 osservazioni ognuno, sono stati messi
 a confronto i campioni relativi alle diverse configurazioni di block size
 per medesimo file size.
 Sono state applicate in maniera preliminare delle statistiche per verificare
 che i campioni appartenenti a configurazioni diverse di block size appartengano
 effettivamente a popolazioni differenti tra loro.
 Per la verifica si potrebbe utilizzare il T-test nel caso in cui i campioni
 siano distribuiti normalmente.
 A tal fine è stato eseguito il test di Shapiro-Wilk sulle diverse distribuzioni.
\end_layout

\begin_layout Standard
*IMMAGINE con distributzioni e test di shakil o neal*
\end_layout

\begin_layout Standard
I risultati del test evidenziano che nessuna delle distribuzioni campionarie
 risulta essere omoschedastica ad una gaussiana.
 Si è optato quindi di utilizzare, per verificare la significatività statistica
 dei diversi campioni, il test non-parametrico di Wilcoxon essendo che tale
 test non fa assunzioni stringenti riguardo la normalità delle distribuzioni
 considerate.
\end_layout

\begin_layout Standard
*TABELLA*
\end_layout

\begin_layout Standard
Per il Teorema del Limite Centrale, essendo la numerosità campionaria maggiore
 di 30 (49), è possibile dire che le medie campionarie stimano con una confidenz
a del 95% la media della popolazione da cui provengono.
 Essendo quindi significativamente diversi i risultati è possibile infine
 effettuare una valutazione, fissato ogni file size, riguardo a quale block
 size garantisca tempi medi di lettura e scrittua migliori.
\end_layout

\begin_layout Subsection
Codice
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=C++,caption={main.cpp}] 
\end_layout

\begin_layout Plain Layout

#include "benchmark.hpp"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

long int filesize[N] = {5*1048576, 2*10485760, 104857600};
\end_layout

\begin_layout Plain Layout

long int blocksize[N] = {5*10240, 2*102400, 1*1048576};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main() {
\end_layout

\begin_layout Plain Layout

	long int numInteraction = 0;
\end_layout

\begin_layout Plain Layout

	unsigned int ex = 0, rep = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	for(int i=0;i<N;i++) {
\end_layout

\begin_layout Plain Layout

		for(int j=N-1;j>=0;j--) {
\end_layout

\begin_layout Plain Layout

			numInteraction = filesize[i]/blocksize[j];
\end_layout

\begin_layout Plain Layout

			cout << "RESULTS OF EXPERIMENT NUMBER: " << ++ex << endl;
\end_layout

\begin_layout Plain Layout

			cout << "FILESIZE: " << filesize[i] << " BLOCKSIZE: " << blocksize[j]
 << " NUMINTERACTION: " << numInteraction << endl;			
\end_layout

\begin_layout Plain Layout

			for(int k=NUM_ESPERIMENTI;k>0;--k) {
\end_layout

\begin_layout Plain Layout

				cout << rep++%30 << ";";
\end_layout

\begin_layout Plain Layout

				analysisWrite(blocksize[j], numInteraction);
\end_layout

\begin_layout Plain Layout

				//checkFileSize(filesize[i]);
\end_layout

\begin_layout Plain Layout

				analysisRead(blocksize[j], numInteraction);
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	return 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=C++,caption={benchmark.hpp}] 
\end_layout

\begin_layout Plain Layout

#ifndef _BENCHMARK_H_
\end_layout

\begin_layout Plain Layout

#define _BENCHMARK_H_
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

#include <iostream>
\end_layout

\begin_layout Plain Layout

#include <fstream>
\end_layout

\begin_layout Plain Layout

#include <fcntl.h>
\end_layout

\begin_layout Plain Layout

#include <unistd.h>
\end_layout

\begin_layout Plain Layout

#include <sys/random.h>
\end_layout

\begin_layout Plain Layout

#include <chrono>
\end_layout

\begin_layout Plain Layout

#include <errno.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

using namespace std;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define NUM_ESPERIMENTI 30
\end_layout

\begin_layout Plain Layout

#define N 3
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void initBufferWrite(long int);
\end_layout

\begin_layout Plain Layout

void initBuffe(void);
\end_layout

\begin_layout Plain Layout

void initBufferRead(void);
\end_layout

\begin_layout Plain Layout

void termBufferWrite(void);
\end_layout

\begin_layout Plain Layout

void termBufferRead(void);
\end_layout

\begin_layout Plain Layout

void analysisWrite(long int, long int);
\end_layout

\begin_layout Plain Layout

void analysisRead(long int, long int);
\end_layout

\begin_layout Plain Layout

long int fileSize();
\end_layout

\begin_layout Plain Layout

void checkFileSize(long int);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#endif //_BENCHMARK_H_
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=C++,caption={function.cpp}] 
\end_layout

\begin_layout Plain Layout

#include "benchmark.hpp"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void *bufferRead;
\end_layout

\begin_layout Plain Layout

void *bufferWrite;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void termBuffer() {
\end_layout

\begin_layout Plain Layout

	termBufferRead();
\end_layout

\begin_layout Plain Layout

	termBufferWrite();
\end_layout

\begin_layout Plain Layout

	remove("file_prova.bin");
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void termBufferRead() {
\end_layout

\begin_layout Plain Layout

	free(bufferRead);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void termBufferWrite() {
\end_layout

\begin_layout Plain Layout

	free(bufferWrite);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void initBufferWrite(long int bs) {
\end_layout

\begin_layout Plain Layout

	int errMemAlign = posix_memalign(&bufferWrite, 4096, bs);
\end_layout

\begin_layout Plain Layout

	system("sync; echo 3 > /proc/sys/vm/drop_caches");	
\end_layout

\begin_layout Plain Layout

	//cout << pathconf("file_prova.bin",_PC_REC_XFER_ALIGN) << endl;
\end_layout

\begin_layout Plain Layout

	if (errMemAlign!=0) {
\end_layout

\begin_layout Plain Layout

		cout << errMemAlign << endl;	
\end_layout

\begin_layout Plain Layout

		exit(0);	
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	if (getrandom(bufferWrite, bs, GRND_NONBLOCK)==-1) {
\end_layout

\begin_layout Plain Layout

		perror("get random error");
\end_layout

\begin_layout Plain Layout

		termBuffer();
\end_layout

\begin_layout Plain Layout

		exit(0);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void initBufferRead(long int bs) {
\end_layout

\begin_layout Plain Layout

	int errMemAlign = posix_memalign(&bufferRead, 4096, bs);
\end_layout

\begin_layout Plain Layout

	//cout << pathconf("file_prova.bin",_PC_REC_XFER_ALIGN) << endl;
\end_layout

\begin_layout Plain Layout

	if (errMemAlign!=0) {
\end_layout

\begin_layout Plain Layout

		cout << errMemAlign << endl;	
\end_layout

\begin_layout Plain Layout

		exit(0);	
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void analysisWrite(long int bs, long int num) {
\end_layout

\begin_layout Plain Layout

	std::chrono::duration<double> elapsedAccumulatorWrite;
\end_layout

\begin_layout Plain Layout

	elapsedAccumulatorWrite.zero();
\end_layout

\begin_layout Plain Layout

	int writeSuccessful = 0;
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	//open file and control
\end_layout

\begin_layout Plain Layout

	int fd = open("file_prova.bin", O_CREAT|O_TRUNC|O_WRONLY|O_APPEND|O_DIRECT|O_SYN
C, S_IRWXU);
\end_layout

\begin_layout Plain Layout

	if(fd==-1) {
\end_layout

\begin_layout Plain Layout

		perror("open file error");
\end_layout

\begin_layout Plain Layout

		termBuffer();
\end_layout

\begin_layout Plain Layout

		exit(0);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	for(int i=num-1;i>=0;--i) {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		//initialize buffer
\end_layout

\begin_layout Plain Layout

		initBufferWrite(bs);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		//start timer
\end_layout

\begin_layout Plain Layout

		auto start_time = std::chrono::system_clock::now();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		//write buffer
\end_layout

\begin_layout Plain Layout

		writeSuccessful = write(fd, bufferWrite, bs);
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

		//end timer
\end_layout

\begin_layout Plain Layout

		auto end_time = std::chrono::system_clock::now();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		//control write
\end_layout

\begin_layout Plain Layout

		if (writeSuccessful != bs) {
\end_layout

\begin_layout Plain Layout

			perror("write error");
\end_layout

\begin_layout Plain Layout

			termBuffer();
\end_layout

\begin_layout Plain Layout

			exit(0);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		//free memory buffer
\end_layout

\begin_layout Plain Layout

		termBufferWrite();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		//update accumulator
\end_layout

\begin_layout Plain Layout

		elapsedAccumulatorWrite += end_time-start_time;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	//close file
\end_layout

\begin_layout Plain Layout

	close(fd);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	//print write time
\end_layout

\begin_layout Plain Layout

	cout << elapsedAccumulatorWrite.count() << ";";
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void analysisRead(long int bs, long int num) {
\end_layout

\begin_layout Plain Layout

	std::chrono::duration<double> elapsedAccumulatorRead;
\end_layout

\begin_layout Plain Layout

	elapsedAccumulatorRead.zero();
\end_layout

\begin_layout Plain Layout

	int readSuccessful = 0;
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

	int fd = open("file_prova.bin", O_RDONLY|O_DIRECT|O_SYNC, S_IRWXU);
\end_layout

\begin_layout Plain Layout

	if(fd==-1) {
\end_layout

\begin_layout Plain Layout

		perror("open file error");
\end_layout

\begin_layout Plain Layout

		termBuffer();
\end_layout

\begin_layout Plain Layout

		exit(0);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	for(int i=num-1;i>=0;--i) {
\end_layout

\begin_layout Plain Layout

		//initialize buffer
\end_layout

\begin_layout Plain Layout

		initBufferRead(bs);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		auto start_time = std::chrono::system_clock::now();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		readSuccessful = read(fd, bufferRead, bs);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		auto end_time = std::chrono::system_clock::now();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		if (readSuccessful != bs) {
\end_layout

\begin_layout Plain Layout

			perror("read error");
\end_layout

\begin_layout Plain Layout

			termBuffer();
\end_layout

\begin_layout Plain Layout

			exit(0);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		termBufferRead();		
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		elapsedAccumulatorRead += end_time-start_time;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	close(fd);
\end_layout

\begin_layout Plain Layout

	cout << elapsedAccumulatorRead.count() << ";" << endl;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

long int fileSize() {
\end_layout

\begin_layout Plain Layout

  streampos begin, end;
\end_layout

\begin_layout Plain Layout

  ifstream fd ("file_prova.bin", ios::binary);
\end_layout

\begin_layout Plain Layout

  begin = fd.tellg();
\end_layout

\begin_layout Plain Layout

  fd.seekg (0, ios::end);
\end_layout

\begin_layout Plain Layout

  end = fd.tellg();
\end_layout

\begin_layout Plain Layout

  fd.close();
\end_layout

\begin_layout Plain Layout

  return end-begin;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void checkFileSize(long int fs) {
\end_layout

\begin_layout Plain Layout

	if(fileSize()<fs) {
\end_layout

\begin_layout Plain Layout

		cout << endl <<"File size mismatch" << endl;
\end_layout

\begin_layout Plain Layout

		cout << fileSize() << " " << fs << endl;
\end_layout

\begin_layout Plain Layout

		exit(0);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
